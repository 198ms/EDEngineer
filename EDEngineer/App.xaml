<Application
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:EDEngineer.Converters"
    xmlns:custom="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    x:Class="EDEngineer.App"
    StartupUri="Views/MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary
                    Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <ResourceDictionary Source="Resources/OriginTemplates.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Color x:Key="EliteOrange">
                #ff7100
            </Color>

            <Color x:Key="SynthesisBlue">
                #9CBDD4
            </Color>

            <Color x:Key="IngredientHighlighted">
                #FFCA64
            </Color>
            
            <Color x:Key="Background">
                #000000
            </Color> 
            
            <Color x:Key="AccentBackground">
                #441e00
            </Color>

            <SolidColorBrush x:Key="EliteOrangeBrush" Color="{StaticResource EliteOrange}"/>
            <SolidColorBrush x:Key="SynthesisBlueBrush" Color="{StaticResource SynthesisBlue}"/>
            <SolidColorBrush x:Key="IngredientHighlightedBrush" Color="{StaticResource IngredientHighlighted}"/>
            <SolidColorBrush x:Key="TransparentBrush" Color="Transparent"/>
            <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource Background}"/>
            <SolidColorBrush x:Key="AccentBackgroundBrush" Color="{StaticResource AccentBackground}"/>

            <SolidColorBrush x:Key="TechnologyBrush" Color="MediumVioletRed"/>
            <SolidColorBrush x:Key="ExperimentalBrush" Color="DarkOliveGreen"/>
            <SolidColorBrush x:Key="UnlockBrush" Color="MediumPurple"/>
            <SolidColorBrush x:Key="GreenBrush" Color="Green"/>
            <SolidColorBrush x:Key="MaterialTraderWillBeEnoughBrush" Color="DarkSlateGray"/>

            <converters:RarityToIconConverter x:Key="RarityToIcon" />
            <converters:ApiRunningToIndicatorConverter x:Key="ApiRunningToIndicator" />
            <converters:SubkindToIcon x:Key="SubkindToIcon" />
            <converters:DoubleToPercentConverter x:Key="DoubleToPercent" />
            <converters:IngredientToVisibilityConverter x:Key="IngredientToVisibility" />
            <converters:FilterToLabelConverter x:Key="FilterToLabel" />
            <converters:AllFiltersToHeaderConverter x:Key="AllFiltersToHeader" />
            <converters:InstantToStringConverter x:Key="InstantToString" />
            <converters:IntegerToVisibilityConverter x:Key="IntegerToVisibility" />
            <converters:IntOrNullConverter x:Key="IntOrNull" />
            <converters:IntegerToVisibilityConverterReversed x:Key="IntegerToVisibilityReversed" />
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibility" />
            <converters:KindToVisibility x:Key="UnknownKindToVisible"
                                         SpecialKind="Unknown"
                                         Inclusive="True"/>
            <converters:KindToVisibility x:Key="CommodityKindToCollapsed"
                                         SpecialKind="Commodity"
                                         Inclusive="False"/>
            <converters:OriginToControlTemplateConverter x:Key="OriginToControlTemplate" />
            <converters:OriginToColorConverter x:Key="OriginToColor" />
            <converters:BooleanToOpacityConverter x:Key="BooleanToOpacity" />
            <converters:ListToVisibilityConverter x:Key="ListToVisibility" />
            <converters:NullableToVisibilityConverter x:Key="NullableToVisibility" />
            <converters:NullableToVisibilityConverter x:Key="ReversedNullableToVisibility"
                                                      Reversed="True"/>
            <converters:BlueprintCategoryToColorConverter x:Key="BlueprintCategoryToColor"
                                                          SynthesisColor="{StaticResource SynthesisBlueBrush}"
                                                          ModuleColor="{StaticResource EliteOrangeBrush}"
                                                          UnlockColor="{StaticResource UnlockBrush}"
                                                          TechnologyColor="{StaticResource TechnologyBrush}"
                                                          ExperimentalColor="{StaticResource ExperimentalBrush}"/>
            
            <converters:BooleanToSpecialColorConverter x:Key="BooleanToHighlightColor"
                                                         SpecialColor="{StaticResource IngredientHighlightedBrush}"
                                                         NormalColor="{StaticResource EliteOrangeBrush}"/>
            <converters:BooleanToSpecialColorConverter x:Key="BooleanToShoppingListHighlightColor"
                                                         SpecialColor="{StaticResource EliteOrangeBrush}"
                                                         NormalColor="Wheat"/>
            <converters:BooleanToSpecialColorConverter x:Key="BooleanToShoppingListBlockHighlightColor"
                                                       SpecialColor="{StaticResource IngredientHighlightedBrush}"
                                                       NormalColor="{StaticResource SynthesisBlueBrush}"/>
            <converters:BooleanToSpecialColorConverter x:Key="BooleanToWillBeEnoughColor"
                                                       SpecialColor="{StaticResource MaterialTraderWillBeEnoughBrush}"
                                                       NormalColor="{StaticResource AccentBackgroundBrush}"/>
            <converters:BooleanToSpecialColorConverter x:Key="BooleanToGoodEffectColorConverter"
                                                       SpecialColor="Green"
                                                       NormalColor="Red"/>
            <converters:IntToEnabledConverter x:Key="IntToEnabled"
                                              Threshold="0"
                                              Comparison="DifferentThan"/>
            <converters:IntToEnabledConverter x:Key="CompositionCountToEnabled"
                                              Threshold="4"
                                              Comparison="LessThan"/>
            <converters:BooleanToEnumConverter x:Key="BooleanToEnum"/>
            <converters:NotificationKindToBooleanConverter x:Key="NotificationKindToBoolean"/>
            <converters:BooleanToFontWeightConverter x:Key="BooleanToFontWeight"/>
            <converters:EnumToDescription x:Key="EnumToDescription"/>
            <converters:HistoryToTop5Converter x:Key="HistoryToTop5Converter"/>
            <converters:ShoppingListBlockToAllGradesVisibility x:Key="ShoppingListBlockToAllGradesVisibility"/>
            <converters:ModuleModifierToColorConverter x:Key="ModuleModifierToColorConverter"/>
            <converters:EntryDataToMaterialTraderLocation x:Key="EntryDataToMaterialTraderLocation"/>
            <converters:EngineerToSystem x:Key="EngineerToSystem"/>

            <BitmapImage x:Key="DesignRaritySource" UriSource="Resources/Images/common.png"/>

            <Style TargetType="ToolTip">
                <Setter Property="Background" Value="{StaticResource EliteOrangeBrush}" />
                <Setter Property="BorderBrush" Value="Black" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="FontFamily" Value="./Resources/Fonts/#Euro Caps" />
            </Style>

            <Style x:Key="CircleToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid x:Name="grid" Background="{StaticResource TransparentBrush}">
                                <Ellipse x:Name="ellipsebg"
                                 Margin="4"
                                 Stroke="{TemplateBinding Foreground}"
                                 StrokeThickness="0"
                                         Fill="{TemplateBinding Background}"
                                 VerticalAlignment="Stretch" />
                                <Ellipse x:Name="ellipse"
                                 Margin="4"
                                 Stroke="{TemplateBinding Foreground}"
                                         Fill="{TemplateBinding Background}"
                                 StrokeThickness="2"
                                 VerticalAlignment="Stretch" />
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" Name="icon"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ellipsebg" Property="Fill" Value="{StaticResource AccentBackgroundBrush}" />
                                    <Setter TargetName="ellipsebg" Property="Opacity" Value="0.2" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ellipse" Property="Opacity" Value="1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="ellipse" Property="Opacity" Value=".5" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true" />
                                <Trigger Property="IsEnabled" Value="false"/>
                                    <Trigger Property="IsKeyboardFocused"
                                 Value="true" />
                                <Trigger Property="ToggleButton.IsChecked"
                                             Value="True" >
                                    <Setter Property="Background" Value="{StaticResource EliteOrangeBrush}" />
                                </Trigger>
                                <Trigger Property="ToggleButton.IsChecked"
                                         Value="False" >
                                    <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="BlueprintGridStyle" TargetType="{x:Type DataGrid}">
                <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type DataGridCell}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Content="{TemplateBinding Content}"
                                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Margin="{TemplateBinding Padding}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource MetroDataGrid.HighlightTextBrush}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridCellHelper.IsCellOrRowHeader" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background"
                                        Value="{DynamicResource MetroDataGrid.HighlightBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="Transparent" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridCellHelper.IsCellOrRowHeader" Value="True" />
                                        <Condition Property="IsKeyboardFocusWithin" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.FocusBorderBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridCellHelper.IsCellOrRowHeader" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background"
                                        Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}" />
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource MetroDataGrid.HighlightTextBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridCellHelper.IsCellOrRowHeader" Value="True" />
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background"
                                        Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}" />
                                </MultiTrigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ColumnHeaderStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type DataGridColumnHeader}">
                            <Setter Property="Foreground" Value="DarkCyan" />
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="SeparatorBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0,0,0,3" />
                            <Setter Property="custom:ControlsHelper.ContentCharacterCasing" Value="Upper" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="FontWeight" Value="SemiBold" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="MinHeight" Value="25" />
                            <Setter Property="MinWidth" Value="0" />
                            <Setter Property="Padding" Value="10,4,4,7" />
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Border x:Name="BackgroundBorder"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Background="{TemplateBinding Background}" Grid.ColumnSpan="2" />
                                            <custom:ContentControlEx x:Name="HeaderContent"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Content="{TemplateBinding Content}"
                                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Padding="{TemplateBinding Padding}"
                                                RecognizesAccessKey="True"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                                            <Path x:Name="SortArrow" Grid.Column="1"
                                                Fill="{DynamicResource GrayBrush2}" Height="10" Margin="0,0,8,2"
                                                RenderTransformOrigin="0.5,0.5" Stretch="Fill" Visibility="Collapsed"
                                                VerticalAlignment="Center" Width="8" />
                                            <Thumb x:Name="PART_LeftHeaderGripper" Background="Transparent"
                                                HorizontalAlignment="Left" HorizontalContentAlignment="Left">
                                                <Thumb.Style>
                                                    <Style TargetType="{x:Type Thumb}">
                                                        <Setter Property="Background"
                                                            Value="{DynamicResource GrayBrush5}" />
                                                        <Setter Property="Cursor" Value="SizeWE" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                    <Border Background="Transparent"
                                                                        Padding="{TemplateBinding Padding}">
                                                                        <Rectangle Fill="{TemplateBinding Background}"
                                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                            Width="1" />
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Width" Value="8" />
                                                    </Style>
                                                </Thumb.Style>
                                            </Thumb>
                                            <Thumb x:Name="PART_RightHeaderGripper" Grid.Column="1"
                                                HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                                                <Thumb.Style>
                                                    <Style TargetType="{x:Type Thumb}">
                                                        <Setter Property="Background"
                                                            Value="{DynamicResource GrayBrush5}" />
                                                        <Setter Property="Cursor" Value="SizeWE" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                    <Border Background="Transparent"
                                                                        Padding="{TemplateBinding Padding}">
                                                                        <Rectangle Fill="{TemplateBinding Background}"
                                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                            Width="1" />
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Width" Value="8" />
                                                    </Style>
                                                </Thumb.Style>
                                            </Thumb>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="SortDirection" Value="Ascending">
                                                <Setter Property="Data" TargetName="SortArrow"
                                                    Value="F1M34,57L42,57 42,32.25 52,42.25 52,31.75 38,17.75 24,31.75 24,42.25 34,32.25 34,57z" />
                                                <Setter Property="Visibility" TargetName="SortArrow" Value="Visible" />
                                            </Trigger>
                                            <Trigger Property="SortDirection" Value="Descending">
                                                <Setter Property="Data" TargetName="SortArrow"
                                                    Value="F1M42,19.0002L34,19.0002 34,43.7502 24,33.7502 24,44.2502 38,58.2502 52,44.2502 52,33.7502 42,43.7502 42,19.0002z" />
                                                <Setter Property="Margin" TargetName="SortArrow" Value="0,0,8,0" />
                                                <Setter Property="Visibility" TargetName="SortArrow" Value="Visible" />
                                            </Trigger>
                                            <Trigger Property="DisplayIndex" Value="0">
                                                <Setter Property="Visibility" TargetName="PART_LeftHeaderGripper"
                                                    Value="Collapsed" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="SortDirection" Value="{x:Null}" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{DynamicResource GrayBrush8}" />
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="DropLocationIndicatorStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type Separator}">
                            <Setter Property="Background" Value="{DynamicResource GrayBrush7}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Separator}">
                                        <Rectangle Fill="{TemplateBinding Background}"
                                            Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="2" />
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="GridLinesVisibility" Value="None" />
                <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource GrayBrush7}" />
                <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource GrayBrush7}" />
                <Setter Property="MinRowHeight" Value="25" />
                <Setter Property="RowHeaderStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type DataGridRowHeader}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush5}" />
                            <Setter Property="BorderThickness" Value="0,0,1,0" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                                        <Grid>
                                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Background="{TemplateBinding Background}"
                                                Margin="{TemplateBinding Margin}"
                                                Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                <StackPanel Orientation="Horizontal">
                                                    <ContentPresenter
                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                        Content="{TemplateBinding Content}"
                                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        RecognizesAccessKey="True"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                    <Control SnapsToDevicePixels="False"
                                                        Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGridRow}}}">
                                                        <Control.Visibility>
                                                            <Binding Path="(Validation.HasError)"
                                                                RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGridRow}}">
                                                                <Binding.Converter>
                                                                    <BooleanToVisibilityConverter />
                                                                </Binding.Converter>
                                                            </Binding>
                                                        </Control.Visibility>
                                                    </Control>
                                                </StackPanel>
                                            </Border>
                                            <Thumb x:Name="PART_TopHeaderGripper" Background="Transparent"
                                                VerticalAlignment="Top" VerticalContentAlignment="Top">
                                                <Thumb.Style>
                                                    <Style TargetType="{x:Type Thumb}">
                                                        <Setter Property="Background"
                                                            Value="{DynamicResource GrayBrush5}" />
                                                        <Setter Property="Cursor" Value="SizeNS" />
                                                        <Setter Property="Height" Value="6" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                    <Border Background="Transparent"
                                                                        Padding="{TemplateBinding Padding}">
                                                                        <Rectangle Fill="{TemplateBinding Background}"
                                                                            Height="1"
                                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Thumb.Style>
                                            </Thumb>
                                            <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom"
                                                VerticalContentAlignment="Bottom">
                                                <Thumb.Style>
                                                    <Style TargetType="{x:Type Thumb}">
                                                        <Setter Property="Background"
                                                            Value="{DynamicResource GrayBrush5}" />
                                                        <Setter Property="Cursor" Value="SizeNS" />
                                                        <Setter Property="Height" Value="6" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                    <Border Background="Transparent"
                                                                        Padding="{TemplateBinding Padding}">
                                                                        <Rectangle Fill="{TemplateBinding Background}"
                                                                            Height="1"
                                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Thumb.Style>
                                            </Thumb>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="RowStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type DataGridRow}">
                            <Setter Property="DetailsVisibility" Value="Collapsed"/>
                            <Setter Property="custom:DataGridRowHelper.SelectionUnit"
                                Value="{Binding SelectionUnit, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}" />
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                            <Setter Property="ValidationErrorTemplate">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Grid Margin="2,0"
                                            ToolTip="{Binding DataContext.ErrorContent, RelativeSource={RelativeSource Self}}"
                                            VerticalAlignment="Center">
                                            <Path
                                                Data="M31.630585,39.233818L56.261485,14.603018C56.879785,13.984618,57.882285,13.984618,58.500685,14.603018L83.131485,39.233818C83.749885,39.852218,83.749885,40.854718,83.131485,41.473018L58.500685,66.103918C57.882385,66.722218,56.879785,66.722218,56.261485,66.103918L31.630585,41.473018C31.012285,40.854718,31.012285,39.852218,31.630585,39.233818z"
                                                Fill="{DynamicResource ControlsValidationBrush}" Height="20"
                                                Stretch="Uniform" Width="20" />
                                            <Path
                                                Data="M53.781741,31.196677C51.544017,31.196677 49.719241,33.021453 49.719241,35.259177 49.719241,37.496901 51.544017,39.321677 53.781741,39.321677 56.019465,39.321677 57.844241,37.496901 57.844241,35.259177 57.844241,33.021453 56.019465,31.196677 53.781741,31.196677z M49.687991,9.821677L49.719241,10.352927 50.937991,29.821677 56.625491,29.821677 57.875491,9.821677 49.687991,9.821677z"
                                                Fill="{DynamicResource ValidationTextBrush}"
                                                HorizontalAlignment="Center" Height="10" Stretch="Uniform"
                                                VerticalAlignment="Center" Width="10" />
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="DetailsVisibility">
                                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="DetailsVisibility">
                                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.1"  Value="{x:Static Visibility.Collapsed}"/>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background"
                                        Value="{DynamicResource MetroDataGrid.HighlightBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.HighlightBrush}" />
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource MetroDataGrid.HighlightTextBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background"
                                        Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}" />
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource MetroDataGrid.HighlightTextBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsMouseOver" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background"
                                        Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}" />
                                    <Setter Property="Foreground" Value="Wheat" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                                        <Condition Property="IsMouseOver" Value="False" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                    <Setter Property="BorderBrush"
                                        Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}" />
                                    <Setter Property="Foreground" Value="{StaticResource EliteOrangeBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="custom:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                                        <Condition Property="IsEnabled" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </MultiTrigger>
                                <DataTrigger Binding="{Binding Category}" Value="Synthesis">
                                    <Setter Property="Foreground" Value="{StaticResource SynthesisBlueBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Category}" Value="Experimental">
                                    <Setter Property="Foreground" Value="{StaticResource ExperimentalBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Category}" Value="Unlock">
                                    <Setter Property="Foreground" Value="{StaticResource UnlockBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Category}" Value="Technology">
                                    <Setter Property="Foreground" Value="{StaticResource TechnologyBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGrid}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
                                    <ScrollViewer.Template>
                                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
                                                    Grid.Column="1">
                                                    <DataGridColumnHeadersPresenter.Visibility>
                                                        <Binding Path="HeadersVisibility"
                                                            RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}" />
                                                    </DataGridColumnHeadersPresenter.Visibility>
                                                </DataGridColumnHeadersPresenter>
                                                <Grid Grid.ColumnSpan="2" Grid.Row="1">
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                        CanContentScroll="{TemplateBinding CanContentScroll}"
                                                        CanHorizontallyScroll="False"
                                                        Grid.ColumnSpan="2"
                                                        CanVerticallyScroll="False"
                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                        Content="{TemplateBinding Content}"
                                                        ContentStringFormat="{TemplateBinding ContentStringFormat}" />
                                                </Grid>
                                                <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2"
                                                    Maximum="{TemplateBinding ScrollableHeight}"
                                                    Orientation="Vertical" Grid.Row="1"
                                                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ViewportSize="{TemplateBinding ViewportHeight}" />
                                                <Grid Grid.Column="1" Grid.Row="2">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition
                                                            Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}" />
                                                        <ColumnDefinition Width="*" />
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1"
                                                        Maximum="{TemplateBinding ScrollableWidth}"
                                                        Orientation="Horizontal"
                                                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                        Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ViewportSize="{TemplateBinding ViewportWidth}" />
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                    </ScrollViewer.Template>
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsGrouping" Value="True">
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Grid" x:Key="BlueprintDetailsGridStyle">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridRow}}"                                      Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="LayoutTransform.ScaleY">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseInOut" />
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="LayoutTransform.ScaleY">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseInOut" />
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="PlaceHolderStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Grid>
                                <TextBox Text="{Binding Path=Text,
                                                RelativeSource={RelativeSource TemplatedParent}, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                         Padding="5,0,0,0"
                                         VerticalContentAlignment="Center"
                                         x:Name="textSource" 
                                         Background="Transparent" 
                                         Panel.ZIndex="2" />
                                <TextBox Text="{TemplateBinding Tag}" FontSize="12" Background="{TemplateBinding Background}" Panel.ZIndex="1" Padding="5,0,0,0">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Foreground" Value="Transparent"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                    <Setter Property="Foreground" Value="LightGray"/>
                                                    <Setter Property="FontStyle" Value="Italic"/>
                                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="UnhighlightButtonStyle"
                   TargetType="Button">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Height" Value="28"/>
                <Setter Property="BorderBrush" Value="{StaticResource IngredientHighlightedBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Background" Value="Black"/>
                <Style.Triggers>
                    <Trigger Property="Visibility" Value="Visible">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                             From="0"
                                                             To="1"
                                                             Duration="0:0:.3"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                             From="1"
                                                             To="0"
                                                             Duration="0:0:.3"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Tag" Value="{StaticResource AccentBackgroundBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid Background="{TemplateBinding Tag}"
                                  SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="3"/>
                                    <ColumnDefinition Width="15"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <iconPacks:PackIconMaterial RenderTransformOrigin="0.5, 0.5" Grid.Column="1" x:Name="icon" Kind="ChevronRight" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <iconPacks:PackIconMaterial.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform x:Name="rtAngle" Angle="0"/>
                                        </TransformGroup>
                                    </iconPacks:PackIconMaterial.RenderTransform>
                                </iconPacks:PackIconMaterial>
                                <ContentPresenter Grid.Column="2" HorizontalAlignment="Left" Margin="0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="rtAngle"
                                                                 Storyboard.TargetProperty="Angle"
                                                                 From="0"
                                                                 To="90"
                                                                 Duration="0:0:0.2"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="rtAngle"
                                                                 Storyboard.TargetProperty="Angle"
                                                                 From="90"
                                                                 To="0"
                                                                 Duration="0:0:0.2"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GroupExpander"
                   TargetType="Expander">
                <Setter Property="Foreground" Value="OrangeRed"/>
                <Setter Property="Tag" Value="{StaticResource AccentBackgroundBrush}"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid Background="{TemplateBinding Tag}"
                                  Margin="30,0,0,0">
                                <ContentPresenter Content="{Binding}"
                                                  HorizontalAlignment="Center"
                                                  Margin="-18,0,0,0"/>
                            </Grid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Expander">
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="3"
                                    SnapsToDevicePixels="true">
                                <DockPanel>
                                    <ToggleButton x:Name="HeaderSite"
                                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                  Content="{TemplateBinding Header}"
                                                  DockPanel.Dock="Top"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  FontWeight="{TemplateBinding FontWeight}"
                                                  FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                                  FontStyle="{TemplateBinding FontStyle}"
                                                  FontStretch="{TemplateBinding FontStretch}"
                                                  FontSize="{TemplateBinding FontSize}"
                                                  FontFamily="{TemplateBinding FontFamily}"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}"
                                                  Tag="{TemplateBinding Tag}"
                                                  Style="{StaticResource ExpanderDownHeaderStyle}"
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <ContentPresenter x:Name="ExpandSite"
                                                      DockPanel.Dock="Bottom"
                                                      Focusable="false"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      Margin="{TemplateBinding Padding}"
                                                      Visibility="Visible"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <ContentPresenter.LayoutTransform>
                                            <ScaleTransform x:Name="contentScale" ScaleY="0"/>
                                        </ContentPresenter.LayoutTransform>
                                    </ContentPresenter>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="contentScale"
                                                                 Storyboard.TargetProperty="ScaleY"
                                                                 To="1"
                                                                 Duration="0:0:0.05"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="contentScale"
                                                                 Storyboard.TargetProperty="ScaleY"
                                                                 To="0"
                                                                 Duration="0:0:0.05"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate TargetType="{x:Type ScrollViewer}"
                             x:Key="ScrollViewerFlatTemplate">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ScrollContentPresenter  CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" 
                                             Content="{TemplateBinding ScrollViewer.Content}" />
                    <ScrollBar Orientation="Vertical" Width="30" Grid.Row="0" Grid.Column="1" Minimum="0" 
                               Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" 
                               Value="{TemplateBinding ScrollViewer.VerticalOffset}" 
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Name="PART_VerticalScrollBar" 
                               Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" 
                               Style="{StaticResource FlatScrollBar}"/>
                    <ScrollBar Orientation="Horizontal" Grid.Row="1" Grid.Column="0" Minimum="0" 
                               Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" 
                               Value="{TemplateBinding ScrollViewer.HorizontalOffset}" 
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Name="PART_HorizontalScrollBar" 
                               Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                               Style="{StaticResource FlatScrollBar}"/>
                </Grid>
            </ControlTemplate>

            <DataTemplate x:Key="ModuleTemplate">
                <Border BorderThickness="1"
                        Margin="5"
                        BorderBrush="{StaticResource EliteOrangeBrush}">
                    <Grid Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Frame Template="{StaticResource OriginUnknown}" 
                               Width="18"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Foreground="RoyalBlue"
                               Visibility="{Binding BlueprintName, Converter={StaticResource ReversedNullableToVisibility}}"
                               Height="18"/>
                        <Frame Template="{StaticResource NeededForEngineer}" 
                               Width="18"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Foreground="Red"
                               Visibility="{Binding BlueprintName, Converter={StaticResource NullableToVisibility}}"
                               Height="18"/>
                        <StackPanel Orientation="Vertical"
                        Grid.Row="0">
                            <TextBlock Text="{Binding Slot}"
                           Foreground="Wheat"
                                       FontSize="14"
                                       HorizontalAlignment="Right"/>
                            <TextBlock Text="{Binding Type}"
                           Foreground="Wheat"
                                       HorizontalAlignment="Right"
                                       FontSize="14"/>
                            <TextBlock Foreground="{StaticResource EliteOrangeBrush}"
                                       FontSize="14"
                                       Visibility="{Binding BlueprintName, Converter={StaticResource NullableToVisibility}}">
                                <Run Text="{Binding BlueprintName, Mode=OneWay}"/>
                                <Run Text="G"/>
                                <Run Text="{Binding Grade, Mode=OneWay}"/>
                                <Run Text="("/>
                                <Run Text="{Binding Engineer, Mode=OneWay}"/>
                                <Run Text=")"/>
                            </TextBlock>
                            <TextBlock Text="{Binding ExperimentalEffect}"
                           Foreground="{StaticResource ExperimentalBrush}"
                                       Visibility="{Binding ExperimentalEffect, Converter={StaticResource NullableToVisibility}}"
                                       FontSize="14"/>
                        </StackPanel>

                        <ItemsControl ItemsSource="{Binding Modifiers}"
                                          Grid.Row="1"
                                      FontSize="14">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <TabPanel/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border BorderThickness="0.5"
                                            BorderBrush="Wheat"
                                            Margin="3">
                                        <Grid Margin="2">
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Rectangle Grid.RowSpan="2"
                                                       Fill="{Binding Converter={StaticResource ModuleModifierToColorConverter}, Mode=OneWay}"
                                                       Opacity="0.05"/>
                                            <TextBlock Text="{Binding Label, Mode=OneWay}"
                                                       Grid.Row="0"
                                                       HorizontalAlignment="Center"
                                                       Foreground="Wheat"/>
                                            <StackPanel Orientation="Horizontal"
                                                        HorizontalAlignment="Center"
                                                        Grid.Row="1">
                                                <TextBlock Foreground="{Binding Converter={StaticResource ModuleModifierToColorConverter}, Mode=OneWay}"
                                                           Text="{Binding Value, Mode=OneWay, StringFormat=F2}"/>
                                                <TextBlock Foreground="{Binding Converter={StaticResource ModuleModifierToColorConverter}, Mode=OneWay}"
                                                           Visibility="{Binding Change, Converter={StaticResource NullableToVisibility}}">
                                                    <Run Text=" ("/>
                                                    <Run Text="{Binding Change, Mode=OneWay, Converter={StaticResource DoubleToPercent}, ConverterParameter='plus'}"/>
                                                    <Run Text=")"/>
                                                </TextBlock>
                                                <TextBlock Foreground="Wheat"
                                                           Visibility="{Binding OriginalValue, Converter={StaticResource NullableToVisibility}}">
                                                    <Run Text=" ["/>
                                                    <Run Text="{Binding OriginalValue, Mode=OneWay, StringFormat=F2}"/>
                                                    <Run Text="]"/>
                                                </TextBlock>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Grid>
                </Border>
            </DataTemplate>
        </ResourceDictionary>
    </Application.Resources>
</Application>